---
title: "Shiny for Python"
author: "<br><br><br><strong>Deepsha Menghani</strong><br>"
execute: 
  echo: true
format: 
  revealjs:
    width: 1600
    height: 900
    theme: "style.scss"
    highlight-style: vim-dark
    code-overflow: wrap
    # footer: "[{{< fa solid display >}}  github.com/deepshamenghani/shinypython_meetup](https://github.com/deepshamenghani/shinypython_meetup) [{{< fa brands mastodon >}} @deepshamenghani](https://fosstodon.org/@deepsha)"
    link-external-newwindow: true
    df-print: kable
from: markdown+emoji
---


## Who am I

::: columns
::: {.column width="50%"}
Data Scientist manager at Microsoft.....

![](quartopptimages/DeepshaMenghani.jpg){width="80%" fig-align="center" fig-alt="Self portrait."}
:::

::: {.column width="50%"}
:::
:::


## The biggest career transition of my life!

::: columns
::: {.column width="50%"}
Data Scientist manager at Microsoft.....

![](quartopptimages/DeepshaMenghani.jpg){width="80%" fig-align="center" fig-alt="Self portrait."}
:::

::: {.column width="50%"}
::: fragment
And a parent as of a month ago!

![](quartopptimages/fam.jpg){width="70%" fig-align="center" fig-alt="Deepsha's puppy and baby hanging."}
:::
:::
:::

# Let's talk Shiny

## Shiny: Started with R and now we Pythoning!

*[https://shiny.posit.co/py/](https://shiny.posit.co/py/)* <br><br>


![](quartopptimages/shinypython.png){width="80%" fig-align="center" fig-alt="Shiny python dashboard example"}



## Let's create this dog characteristics dashboard

*[Data source: TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-02-01/readme.md)* <br><br>


![](quartopptimages/dashboardgif.gif){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}

## Some initial setup 

<br>

::: {.incremental}


1. Install Shiny for Python extension (For VSCode)
2. Create a virtual environment for your project (just best practice)
3. Install the required packages by either running individual commands like "pip install shiny" or installing all packages by running "pip install -r requirements.txt"

::: fragment
![](quartopptimages/reqstxt.png){width="30%" fig-align="left" fig-alt="Shiny python dashboard example"}
:::

:::

## The basic app commands and structure to get started

::: columns
::: {.column width="35%"}
::: fragment
*Shiny create - -help* <br><br>
:::
:::

::: {.column width="65%"}
::: fragment
![](quartopptimages/shinycreatehelp.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::
:::

# The base components

## 1.0 The code structure of a basic app

::: columns
::: {.column width="50%"}
*Shiny create -t basic-app* <br>

```{python eval=FALSE}
#| code-line-numbers: "|1|3-7|9-12|14"
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.panel_title("Hello Shiny!"),
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)

def server(input, output, session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"

app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/appbasic.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

# 2.0 Personalizing the app

## 2.1 Adding a data frame output

::: columns
::: {.column width="50%"}

```{python eval=FALSE}
#| code-line-numbers: "|2-3|5|7-9|11-14"
from shiny import App, render, ui
import pandas as pd
from pathlib import Path

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")

app_ui = ui.page_fillable(
    ui.output_data_frame("dog_df")
)

def server(input, output, session):
    @render.data_frame
    def dog_df():
        return df
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app21.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## 2.2 Adding a plot output

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|4|10|18-21"
from shiny import App, render, ui
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")

app_ui = ui.page_fillable(
    ui.output_data_frame("dog_df"),
    ui.output_plot("breed_plot")
)

def server(input, output, session):
    @render.data_frame
    def dog_df():
        return df
    
    @render.plot
    def breed_plot():
        fig = create_trait_rating_plot(df, "Bulldogs")
        return fig
    
app = App(app_ui, server)


```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app22.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

# 3.0 Sidebar and filters

## 3.1 Adding sidebar layout and filters

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|7|10-16|11-13|14-15|24-28"
from shiny import App, render, ui
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs")
        ),
        ui.output_data_frame("dog_df"),
        ui.output_plot("breed_plot")
    ),
)

def server(input, output, session):
    @render.data_frame
    def dog_df():
        return df
    
    @render.plot
    def breed_plot():
        fig = create_trait_rating_plot(df, input.inputbreed())
        return fig
    
app = App(app_ui, server)
```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app31.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## 3.2 Adding selectize filter

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|8|14|22-25"
from shiny import App, render, ui
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
        ),
        ui.output_data_frame("dog_df"),
        ui.output_plot("breed_plot")
    ),
)

def server(input, output, session):
    @render.data_frame
    def dog_df():
        filtered_df = df[(df['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    def breed_plot():
        df_updated = df.copy()
        fig = create_trait_rating_plot(df_updated, input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app32.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## 3.3 Adding slider inputs

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|15-16"
from shiny import App, render, ui
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
            ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
        ),
        ui.output_data_frame("dog_df"),
        ui.output_plot("breed_plot")
    ),
)

def server(input, output, session):
    @render.data_frame
    def dog_df():
        filtered_df = df[(df['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    def breed_plot():
        df_updated = df.copy()
        fig = create_trait_rating_plot(df_updated, input.inputbreed())
        return fig
    
app = App(app_ui, server)
```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app33.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## 3.4 Using reactive calc to filter across multiple outputs

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "1|24-28|30-33|35-38"
from shiny import App, render, ui, reactive
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
            ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
        ),
        ui.output_data_frame("dog_df"),
        ui.output_plot("breed_plot")
    ),
)

def server(input, output, session):
    @reactive.Calc
    def filtered_ratings():
        filtered_rating = df[(df['rating'] >= input.ratingmin()) &
                     (df['rating'] <= input.ratingmax())]
        return filtered_rating.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.data_frame
    def dog_df():
        filtered_df = filtered_ratings()[(filtered_ratings()['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    def breed_plot():
        fig = create_trait_rating_plot(filtered_ratings(), input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app34.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::



## 3.5 Action buttons

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|17|31-35|37-41"
from shiny import App, render, ui, reactive
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
            ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
            ui.input_action_button("apply", "Apply settings", class_="btn-secondary"),
        ),
        ui.output_data_frame("dog_df"),
        ui.output_plot("breed_plot")
    ),
)

def server(input, output, session):
    @reactive.Calc
    def filtered_ratings():
        filtered_rating = df[(df['rating'] >= input.ratingmin()) &
                     (df['rating'] <= input.ratingmax())]
        return filtered_rating.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.data_frame
    @reactive.event(input.apply, ignore_none=False)
    def dog_df():
        filtered_df = filtered_ratings()[(filtered_ratings()['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    @reactive.event(input.apply, ignore_none=False)
    def breed_plot():
        fig = create_trait_rating_plot(filtered_ratings(), input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app35.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

# 4.0 Columns and ui.card layouts

## 4.1 Adding space around outputs with ui.card

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|21|19-22|23-26"
from shiny import App, render, ui, reactive
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
            ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
            ui.input_action_button("apply", "Apply settings", class_="btn-secondary"),
        ),
        ui.card(
            ui.card_header("Select the traits to update this plot"),
            ui.output_data_frame("dog_df"),
        ),
        ui.card(
            ui.card_header("Select the breed to update this plot"),
            ui.output_plot("breed_plot")
        )
    ),
)

def server(input, output, session):
    @reactive.Calc
    def filtered_ratings():
        filtered_rating = df[(df['rating'] >= input.ratingmin()) &
                     (df['rating'] <= input.ratingmax())]
        return filtered_rating.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.data_frame
    @reactive.event(input.apply, ignore_none=False)
    def dog_df():
        filtered_df = filtered_ratings()[(filtered_ratings()['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    @reactive.event(input.apply, ignore_none=False)
    def breed_plot():
        fig = create_trait_rating_plot(filtered_ratings(), input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app41.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## 4.2 Adding a column layout

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|20-27|19-31|28-30"
from shiny import App, render, ui, reactive
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
            ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
            ui.input_action_button("apply", "Apply settings", class_="btn-secondary"),
        ),
        ui.layout_columns(
            ui.card(
            ui.card_header("Select the traits to update this plot"),
            ui.output_data_frame("dog_df"),
            ),
            ui.card(
                ui.card_header("Select the breed to update this plot"),
                ui.output_plot("breed_plot")
            ),
            gap = "2rem",
            col_widths={"sm": (5, 7)},
            height = "400px"
        )
    ),
)

def server(input, output, session):
    @reactive.Calc
    def filtered_ratings():
        filtered_rating = df[(df['rating'] >= input.ratingmin()) &
                     (df['rating'] <= input.ratingmax())]
        return filtered_rating.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.data_frame
    @reactive.event(input.apply, ignore_none=False)
    def dog_df():
        filtered_df = filtered_ratings()[(filtered_ratings()['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    @reactive.event(input.apply, ignore_none=False)
    def breed_plot():
        fig = create_trait_rating_plot(filtered_ratings(), input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app42.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

# 5.0 Images and text

## 5.1 Using tags to add images

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|9|20-22"
from shiny import App, render, ui, reactive
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()
dogimg_url = "https://camo.githubusercontent.com/97a9cd3442db4582637cacccfc9546801c05c4b98d23c23b85ffde9553a401f3/68747470733a2f2f6d656469612d636c646e72792e732d6e62636e6577732e636f6d2f696d6167652f75706c6f61642f6e657773636d732f323032305f32382f313538373636312f646f67732d6167652d79656172732d6b622d696e6c696e652d3230303730372e6a7067"

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
            ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
            ui.input_action_button("apply", "Apply settings", class_="btn-secondary"),
        ),
        ui.row(
            ui.column(6, ui.card(ui.tags.img(src=dogimg_url, height="100%", width="100%")))
        ),
        ui.layout_columns(
            ui.card(
            ui.card_header("Select the traits to update this plot"),
            ui.output_data_frame("dog_df"),
            ),
            ui.card(
                ui.card_header("Select the breed to update this plot"),
                ui.output_plot("breed_plot")
            ),
            gap = "2rem",
            col_widths={"sm": (5, 7)},
            height = "400px"
        )
    ),
)

def server(input, output, session):
    @reactive.Calc
    def filtered_ratings():
        filtered_rating = df[(df['rating'] >= input.ratingmin()) &
                     (df['rating'] <= input.ratingmax())]
        return filtered_rating.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.data_frame
    @reactive.event(input.apply, ignore_none=False)
    def dog_df():
        filtered_df = filtered_ratings()[(filtered_ratings()['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    @reactive.event(input.apply, ignore_none=False)
    def breed_plot():
        fig = create_trait_rating_plot(filtered_ratings(), input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app51.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::


## 5.2 Tag headings and markdown text

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|21|23|24|20-26"
from shiny import App, render, ui, reactive
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()
dogimg_url = "https://camo.githubusercontent.com/97a9cd3442db4582637cacccfc9546801c05c4b98d23c23b85ffde9553a401f3/68747470733a2f2f6d656469612d636c646e72792e732d6e62636e6577732e636f6d2f696d6167652f75706c6f61642f6e657773636d732f323032305f32382f313538373636312f646f67732d6167652d79656172732d6b622d696e6c696e652d3230303730372e6a7067"

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
            ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
            ui.input_action_button("apply", "Apply settings", class_="btn-secondary"),
        ),
        ui.row(
            ui.column(6, ui.card(ui.tags.img(src=dogimg_url, height="100%", width="100%"))),
            ui.column(5, 
                ui.tags.h1("Who is the goodest doggy?!?"),
                ui.markdown("TidyTuesday dataset courtesy of [KKakey](https://github.com/kkakey/dog_traits_AKC/blob/main/README.md) sourced from the [American Kennel Club](https://www.akc.org/).")
            ),
        ),
        ui.layout_columns(
            ui.card(
            ui.card_header("Select the traits to update this plot"),
            ui.output_data_frame("dog_df"),
            ),
            ui.card(
                ui.card_header("Select the breed to update this plot"),
                ui.output_plot("breed_plot")
            ),
            gap = "2rem",
            col_widths={"sm": (5, 7)},
            height = "400px"
        )
    ),
)

def server(input, output, session):
    @reactive.Calc
    def filtered_ratings():
        filtered_rating = df[(df['rating'] >= input.ratingmin()) &
                     (df['rating'] <= input.ratingmax())]
        return filtered_rating.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.data_frame
    @reactive.event(input.apply, ignore_none=False)
    def dog_df():
        filtered_df = filtered_ratings()[(filtered_ratings()['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    @reactive.event(input.apply, ignore_none=False)
    def breed_plot():
        fig = create_trait_rating_plot(filtered_ratings(), input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app52.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

# 6.0 Panels


## 6.1 Draggable panels

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|25-26|24-27|23-31"
from shiny import App, render, ui, reactive
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()
dogimg_url = "https://camo.githubusercontent.com/97a9cd3442db4582637cacccfc9546801c05c4b98d23c23b85ffde9553a401f3/68747470733a2f2f6d656469612d636c646e72792e732d6e62636e6577732e636f6d2f696d6167652f75706c6f61642f6e657773636d732f323032305f32382f313538373636312f646f67732d6167652d79656172732d6b622d696e6c696e652d3230303730372e6a7067"

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
            ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
            ui.input_action_button("apply", "Apply settings", class_="btn-secondary"),
        ),
        ui.row(
            ui.column(6, ui.card(ui.tags.img(src=dogimg_url, height="100%", width="100%"))),
            ui.column(5,
                ui.panel_absolute(  
                    ui.panel_well(
                        ui.tags.h1("Who is the goodest doggy?!?"),
                        ui.markdown("TidyTuesday dataset courtesy of [KKakey](https://github.com/kkakey/dog_traits_AKC/blob/main/README.md) sourced from the [American Kennel Club](https://www.akc.org/).")
                    ),
                    width="450px",  
                    right="75px",  
                    draggable=False,  
                )
            ),
        ),
        ui.layout_columns(
            ui.card(
            ui.card_header("Select the traits to update this plot"),
            ui.output_data_frame("dog_df"),
            ),
            ui.card(
                ui.card_header("Select the breed to update this plot"),
                ui.output_plot("breed_plot")
            ),
            gap = "2rem",
            col_widths={"sm": (5, 7)},
            height = "400px"
        )
    ),
)

def server(input, output, session):
    @reactive.Calc
    def filtered_ratings():
        filtered_rating = df[(df['rating'] >= input.ratingmin()) &
                     (df['rating'] <= input.ratingmax())]
        return filtered_rating.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.data_frame
    @reactive.event(input.apply, ignore_none=False)
    def dog_df():
        filtered_df = filtered_ratings()[(filtered_ratings()['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    @reactive.event(input.apply, ignore_none=False)
    def breed_plot():
        fig = create_trait_rating_plot(filtered_ratings(), input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app61.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::


## 6.2 Conditional panels

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|19-20|16|16-21"
from shiny import App, render, ui, reactive
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()
dogimg_url = "https://camo.githubusercontent.com/97a9cd3442db4582637cacccfc9546801c05c4b98d23c23b85ffde9553a401f3/68747470733a2f2f6d656469612d636c646e72792e732d6e62636e6577732e636f6d2f696d6167652f75706c6f61642f6e657773636d732f323032305f32382f313538373636312f646f67732d6167652d79656172732d6b622d696e6c696e652d3230303730372e6a7067"

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_checkbox("show", "Set limits for ratings", False),
            ui.panel_conditional(
                "input.show", 
                ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
                ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
            ),
            ui.input_action_button("apply", "Apply settings", class_="btn-secondary"),
        ),
        ui.row(
            ui.column(6, ui.card(ui.tags.img(src=dogimg_url, height="100%", width="100%"))),
            ui.column(5,
                ui.panel_absolute(  
                    ui.panel_well(
                        ui.tags.h1("Who is the goodest doggy?!?"),
                        ui.markdown("TidyTuesday dataset courtesy of [KKakey](https://github.com/kkakey/dog_traits_AKC/blob/main/README.md) sourced from the [American Kennel Club](https://www.akc.org/).")
                    ),
                    width="450px",  
                    right="75px",  
                    draggable=False,  
                )
            ),
        ),
        ui.layout_columns(
            ui.card(
            ui.card_header("Select the traits to update this plot"),
            ui.output_data_frame("dog_df"),
            ),
            ui.card(
                ui.card_header("Select the breed to update this plot"),
                ui.output_plot("breed_plot")
            ),
            gap = "2rem",
            col_widths={"sm": (5, 7)},
            height = "400px"
        )
    ),
)

def server(input, output, session):
    @reactive.Calc
    def filtered_ratings():
        filtered_rating = df[(df['rating'] >= input.ratingmin()) &
                     (df['rating'] <= input.ratingmax())]
        return filtered_rating.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.data_frame
    @reactive.event(input.apply, ignore_none=False)
    def dog_df():
        filtered_df = filtered_ratings()[(filtered_ratings()['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    @reactive.event(input.apply, ignore_none=False)
    def breed_plot():
        fig = create_trait_rating_plot(filtered_ratings(), input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app62.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

# 7.0 Themes

## 7.1 Updating sidebar color scheme

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|13-24|14-22|23"
from shiny import App, render, ui, reactive
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()
dogimg_url = "https://camo.githubusercontent.com/97a9cd3442db4582637cacccfc9546801c05c4b98d23c23b85ffde9553a401f3/68747470733a2f2f6d656469612d636c646e72792e732d6e62636e6577732e636f6d2f696d6167652f75706c6f61642f6e657773636d732f323032305f32382f313538373636312f646f67732d6167652d79656172732d6b622d696e6c696e652d3230303730372e6a7067"

app_ui = ui.page_fillable(
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_checkbox("show", "Set limits for ratings", False),
            ui.panel_conditional(
                "input.show", 
                ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
                ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
            ),
            ui.input_action_button("apply", "Apply settings", class_="btn-secondary"),
            bg="#f6e7e8", open="open"
        ),
        ui.row(
            ui.column(6, ui.card(ui.tags.img(src=dogimg_url, height="100%", width="100%"))),
            ui.column(5,
                ui.panel_absolute(  
                    ui.panel_well(
                        ui.tags.h1("Who is the goodest doggy?!?"),
                        ui.markdown("TidyTuesday dataset courtesy of [KKakey](https://github.com/kkakey/dog_traits_AKC/blob/main/README.md) sourced from the [American Kennel Club](https://www.akc.org/).")
                    ),
                    width="450px",  
                    right="75px",  
                    draggable=False,  
                )
            ),
        ),
        ui.layout_columns(
            ui.card(
            ui.card_header("Select the traits to update this plot"),
            ui.output_data_frame("dog_df"),
            ),
            ui.card(
                ui.card_header("Select the breed to update this plot"),
                ui.output_plot("breed_plot")
            ),
            gap = "2rem",
            col_widths={"sm": (5, 7)},
            height = "400px"
        )
    ),
)

def server(input, output, session):
    @reactive.Calc
    def filtered_ratings():
        filtered_rating = df[(df['rating'] >= input.ratingmin()) &
                     (df['rating'] <= input.ratingmax())]
        return filtered_rating.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.data_frame
    @reactive.event(input.apply, ignore_none=False)
    def dog_df():
        filtered_df = filtered_ratings()[(filtered_ratings()['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    @reactive.event(input.apply, ignore_none=False)
    def breed_plot():
        fig = create_trait_rating_plot(filtered_ratings(), input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app71.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::


## 7.2 Updating page theme

::: columns
::: {.column width="50%"}
<br>

```{python eval=FALSE}
#| code-line-numbers: "|5|12-13"
from shiny import App, render, ui, reactive
import pandas as pd
from pathlib import Path
from trait_rating_plot import create_trait_rating_plot
from shinyswatch import theme

df = pd.read_csv(Path(__file__).parent / "dog_traits.csv", na_values = "NA")
breeds = df.breed.unique().tolist()
traits = df.trait.unique().tolist()
dogimg_url = "https://camo.githubusercontent.com/97a9cd3442db4582637cacccfc9546801c05c4b98d23c23b85ffde9553a401f3/68747470733a2f2f6d656469612d636c646e72792e732d6e62636e6577732e636f6d2f696d6167652f75706c6f61642f6e657773636d732f323032305f32382f313538373636312f646f67732d6167652d79656172732d6b622d696e6c696e652d3230303730372e6a7067"

app_ui = ui.page_fillable(
    theme.minty(),
    ui.page_sidebar(
        ui.sidebar(
            ui.input_select("inputbreed", label = "Select breed", choices = breeds, selected="Bulldogs"),
            ui.input_selectize(id = "inputtrait", label= "Select traits", choices = traits, multiple=True, selected="Adaptability Level"),
            ui.input_checkbox("show", "Set limits for ratings", False),
            ui.panel_conditional(
                "input.show", 
                ui.input_slider(id = "ratingmin", label="Minimum rating", min=1, max=5, value=1),
                ui.input_slider(id = "ratingmax", label="Maximum rating", min=1, max=5, value=5),
            ),
            ui.input_action_button("apply", "Apply settings", class_="btn-secondary"),
            bg="#f6e7e8", open="open"
        ),
        ui.row(
            ui.column(6, ui.card(ui.tags.img(src=dogimg_url, height="100%", width="100%"))),
            ui.column(5,
                ui.panel_absolute(  
                    ui.panel_well(
                        ui.tags.h1("Who is the goodest doggy?!?"),
                        ui.markdown("TidyTuesday dataset courtesy of [KKakey](https://github.com/kkakey/dog_traits_AKC/blob/main/README.md) sourced from the [American Kennel Club](https://www.akc.org/).")
                    ),
                    width="450px",  
                    right="75px",  
                    draggable=False,  
                )
            ),
        ),
        ui.layout_columns(
            ui.card(
            ui.card_header("Select the traits to update this plot"),
            ui.output_data_frame("dog_df"),
            ),
            ui.card(
                ui.card_header("Select the breed to update this plot"),
                ui.output_plot("breed_plot")
            ),
            gap = "2rem",
            col_widths={"sm": (5, 7)},
            height = "400px"
        )
    ),
)

def server(input, output, session):
    @reactive.Calc
    def filtered_ratings():
        filtered_rating = df[(df['rating'] >= input.ratingmin()) &
                     (df['rating'] <= input.ratingmax())]
        return filtered_rating.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.data_frame
    @reactive.event(input.apply, ignore_none=False)
    def dog_df():
        filtered_df = filtered_ratings()[(filtered_ratings()['trait'].isin(input.inputtrait()))]
        return filtered_df.sort_values(by=["trait", "rating"], ascending=[True, False])
    
    @render.plot
    @reactive.event(input.apply, ignore_none=False)
    def breed_plot():
        fig = create_trait_rating_plot(filtered_ratings(), input.inputbreed())
        return fig
    
app = App(app_ui, server)

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/app72.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::


```{r, echo=FALSE}
params <- list(
  farmer = "Sammy Sunflower",
  year = 2023
)
```

## We just created this app with "Core Shiny"

![](quartopptimages/dashboardgif.gif){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}

# But what about Shiny express?

![](quartopptimages/taylorswift_fullfan_gif.gif){width="60%" fig-align="center" fig-alt=""}

## Shiny core and express code structure

::: columns
::: {.column width="50%"}

*CORE* <br>
*Shiny create -t basic-app* <br>
*And then select Core Shiny* <br>


```{python eval=FALSE}
#| code-line-numbers: "|1|3-7|9-12|14"
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.panel_title("Hello Shiny!"),
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)

def server(input, output, session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"

app = App(app_ui, server)

```


<br>

:::

::: {.column width="50%"}
::: {.fragment}

<br>

![](quartopptimages/appbasic.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}


:::

:::
:::

## Shiny core and express code structure

::: columns
::: {.column width="50%"}

*CORE* <br>
*Shiny create -t basic-app* <br>
*And then select Core Shiny* <br>


```{python eval=FALSE}
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.panel_title("Hello Shiny!"),
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)

def server(input, output, session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"

app = App(app_ui, server)

```


<br>

:::

::: {.column width="50%"}
::: {.fragment}

*EXPRESS APP* <br>
*Shiny create -t basic-app* <br>
*And then select Shiny Express* <br>

```{python eval=FALSE}
#| code-line-numbers: "|1-2|4-5|7-9|"
from shiny import render, ui
from shiny.express import input

ui.panel_title("Hello Shiny!")
ui.input_slider("n", "N", 0, 100, 20)

@render.text
def txt():
    return f"n*2 is {input.n() * 2}"


```

:::

:::
:::




## Ui and server do not have to be separate in Shiny Express


::: columns
::: {.column width="50%"}
*Shiny create -t basic-app* <br>

```{python eval=FALSE}
#| code-line-numbers: "|1-2|4-5|7-9|11-12|14-16"
from shiny import render, ui
from shiny.express import input

ui.panel_title("Hello Shiny!")
ui.input_slider("n", "N", 0, 100, 20)

@render.text
def txt():
    return f"n*2 is {input.n() * 2}"

ui.panel_title("Hello again Shiny!")
ui.input_slider("z", "Z", 50, 100, 70)

@render.text
def txt2():
    return f"Z*3 is {input.z() * 3}"

```
:::

::: {.column width="50%"}

<br>
![](quartopptimages/appbasic_expressexample.png){width="100%" fig-align="center" fig-alt="Shiny python dashboard example"}
:::
:::

## But does that mean Shiny core will go away?

::: columns
::: {.column width="50%"}

::: {.fragment}
![](quartopptimages/i-am-calm-taylor-swift-me.gif){width="100%" fig-align="center" fig-alt=""}
:::

::: {.fragment}

Is Shiny Core gonna stay? <br>
Link: [Shiny express announcement](https://shiny.posit.co/blog/posts/shiny-express/)

![](quartopptimages/shinycorefaqstays.png){width="100%" fig-align="center" fig-alt=""}
:::


:::

::: {.column width="50%"}


::: {.fragment}

When to use what? <br>
Link: [Shiny express announcement](https://shiny.posit.co/blog/posts/shiny-express/)

![](quartopptimages/shinycore_forcomplex.png){width="100%" fig-align="center" fig-alt=""}
:::

::: {.fragment}


How do I translate from one to another <br>
Link: [Shiny code examples](https://shiny.posit.co/blog/posts/shiny-express/)


![](quartopptimages/shinyexpressandcore.png){width="50%" fig-align="center" fig-alt=""}
:::

:::
:::

## I know that was a lot of information!!!

<br>

![](quartopptimages/taylorscreaming.gif){width="100%" fig-align="center" fig-alt="TSwift screaming"}

## Resources


-   **Everything related to this presentation**
    -   [Short Link to presentation - https://bit.ly/shinyforpythonslides](https://bit.ly/shinyforpythonslides)
    -   [Shiny code](https://www.apreshill.com/blog/2022-04-we-dont-talk-about-quarto/)
    -   ["Who is the Goodest Doggy" App]()
-   **Additional Peeps, resources and events to follow**
    -   [Gordon Shotwell](https://www.linkedin.com/in/gshotwell/)
    -   [Upcoming Shiny Express webinar by Winston Chang](https://www.linkedin.com/posts/rachaeldempsey_were-so-excited-to-share-a-quicker-and-simpler-activity-7166453499340259328-__Me?utm_source=share&utm_medium=member_desktop)
    -   [Shiny for python documentation](https://shiny.posit.co/py/docs/overview.html)
    -   [Deploying Shiny for Python application](https://shiny.posit.co/py/docs/deploy.html)



## Let's connect

::: columns
::: {.column width="60%"}

Mastodon: [\@deepsha](https://fosstodon.org/@deepsha)

LinkedIn: [deepshamenghani](https://bit.ly/deepshamenghani)

Github: [deepshamenghani](https://github.com/deepshamenghani/)

<br> 

### Slides qr code
[![](quartopptimages/bit.ly_shinyforpythonslides.png){style="max-" fig-alt="QR code to slides." fig-align="left" height="300"}](https://bit.ly/shinyforpythonslides)
:::

::: {.column width="40%"}
![](quartopptimages/DeepshaMenghani.jpg){height="600"}
:::
:::